@page "/Metas"
@inject MetasService metasService
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager navigation

<PageTitle>Metas</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Metas</strong></h3>
			<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle"/> Crear</button>
			<button type="button" class="btn btn-outline-info" @onclick="IrADetalles"><i class="bi bi-card-list"/> Detalles</button>
		</div>
		@*Body*@
		<div class="card-body">
			@if(metas.Count == 0)
			{
				<p><em>Cargando...</em></p>
			}
			else
			{
				@*Fechas*@
				<div class="mb-3">
					<div class="row">
						<div class="col-3">
							<label class="form-label" for="desde"><strong>Desde:</strong></label>
							<InputDate id="desde" class="form-control" @bind-Value="desde"></InputDate>
						</div>
						<div class="col-3">
							<label class="form-label" for="hasta"><strong>Hasta:</strong></label>
							<InputDate id="hasta" class="form-control" @bind-Value="hasta"></InputDate>
						</div>
					</div>
				</div>

				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option>Elige una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="descripcion">Descripci&oacute;n</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table">
					<thead>
						<tr>
							<th>Meta Id</th>
							<th>Fecha</th>
							<th>Descripci&oacute;n</th>
							<th>Monto</th>
						</tr>
					</thead>
					<tbody>
						@foreach(var meta in metas)
						{
							<tr>
								<td>@meta.MetaId</td>
								<td>@meta.Fecha.ToShortDateString()</td>
								<td>@meta.Descripcion</td>
								<td>@meta.Monto.ToString("N2")</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		@*Footer*@
		<div class="card-footer">
			<p><strong>Total de Metas:</strong> @metas.Count</p>
		</div>
	</div>
</div>
@mensaje

@code {
	public List<Metas> metas = new List<Metas>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		metas = await metasService.Listar(m => m.MetaId > 0);
	}

	public async Task Buscar()
	{
		if (desde > hasta)
		{
			mensaje = "La fecha inicial no puede ser mayor a la fecha final";
			await Task.Delay(3000);
			return;
		}

		if (valorFiltro == null)
		{
			mensaje = "Debe ingresar un dato";
			await Task.Delay(3000);
			return;
		}
		List<Metas> filtradoList1 = new List<Metas>();
		if (filtro == "id")
		{
			if (int.TryParse(valorFiltro, out int id))
			{
				var valor = filtradoList1 = await metasService.Listar(a => a.MetaId == id);
				if (valor.Count != 0)
					metas = valor;
				else
					mensaje = "Se encontraron resultados";
			}
			else
			{
				mensaje = "El valor ingresado para MetaId no es válido";
				await Task.Delay(3000);
			}
		}
		else if (filtro == "descripcion")
		{
			filtradoList1 = await metasService.Listar(a => a.Descripcion.ToLower().Contains(valorFiltro.ToLower()));
			Filtrado(filtradoList1);
		}
		else
		{
			mensaje = "Debe elegir un método parar filtrar";
			await Task.Delay(3000);
		}
	}

	public async Task Restablecer()
	{
		metas = await metasService.Listar(a => a.MetaId > 0);
		mensaje = "Lo datos fueron resstablecidos";
	}

	public async Task Filtrado(List<Metas> filtrados)
	{
		List<Metas> filtradoList2 = new List<Metas>();
		foreach (var filtrado in filtrados)
		{
			if (filtrado.Fecha >= desde && filtrado.Fecha <= hasta)
				filtradoList2.Add(filtrado);
		}

		if (filtradoList2.Count != 0)
		{
			metas = filtradoList2;
			mensaje = "Se encontraron resultados";
		}
		else
		{
			mensaje = "No se encontraron resultados";
			await Task.Delay(3000);
		}
	}


	public void IrACrear()
	{
		navigation.NavigateTo("/CreateMetas");
	}
	public void IrADetalles()
	{
		navigation.NavigateTo("/DetailsMetas");
	}
}
